# Modified docker-compose.yml with 42 campus constraints
name: transcendence

services:
  # Main Services
  nginx:
    image: nginx:1.27-alpine
    container_name: transcendence-nginx
    user: root
    ports:
      - "${NGINX_HTTP_PORT:-9180}:80"
      - "${NGINX_HTTPS_PORT:-9443}:443"
    labels:
      - "app=transcendence"
      - "tier=frontend"
      - "works-with=backend"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/snippets:/etc/nginx/snippets
      - ../config/ssl:/etc/ssl:ro
      - ../config/auth:/etc/nginx/auth:ro
      - ../logs/nginx:/var/log/nginx
      - ../backend/public:/var/www/html/public:ro
      - ../docker/nginx/docker-entrypoint.sh:/docker-entrypoint-custom.sh:ro
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT:-3000}
      - BACKEND_PORT=${BACKEND_PORT:-9000}
      - GAME_WS_PORT=${GAME_WS_PORT:-8081}
      - GAME_WS_CONTAINER_PORT=${GAME_WS_CONTAINER_PORT:-8080}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT:-9090}
      - GRAFANA_PORT=${GRAFANA_PORT:-3001}
      - GRAFANA_CONTAINER_PORT=${GRAFANA_CONTAINER_PORT:-3000}
      - CADVISOR_PORT=${CADVISOR_PORT:-8080}
      - SCOPE_PORT=${SCOPE_PORT:-4040}
    secrets:
      - scope_htpasswd
    entrypoint: ["/bin/sh", "/docker-entrypoint-custom.sh"]
    command: ["nginx", "-g", "daemon off;"]
    networks: [default, monitoring]
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    # Mejoras de seguridad
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "prod", "dev"]

  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    container_name: transcendence-backend
    expose:
      - "${BACKEND_PORT:-9000}"
    volumes:
      - ../backend/public:/var/www/html/public
      - ../backend/database:/var/www/html/database
    labels:
      - "app=transcendence"
      - "tier=api"
    environment:
      - APP_ENV=${ENV:-development}
      - APP_DEBUG=${APP_DEBUG:-true}
      - DB_DATABASE=/var/www/html/database/database.sqlite
    secrets:
      - app_key
      - jwt_secret
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks: [default, monitoring]
    # Ejecutar como usuario root para resolver problemas de permisos
    user: root
    # Mejoras de seguridad
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - SETGID
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "prod", "dev"]

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: transcendence-frontend
    expose:
      - "${FRONTEND_PORT:-3000}"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    labels:
      - "app=transcendence"
      - "tier=ui"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks: [default]
    # Mejoras de seguridad
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "prod", "dev"]

  game-ws:
    build:
      context: ../game-ws
      dockerfile: ../docker/game-ws/Dockerfile
    container_name: transcendence-game-ws
    expose:
      - "${GAME_WS_CONTAINER_PORT:-8080}"
    volumes:
      - ../game-ws:/app
    labels:
      - "app=transcendence"
      - "tier=websocket"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${GAME_WS_CONTAINER_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks: [default]
    # Mejoras de seguridad
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "prod", "dev"]

  # Servicios de monitorización - All made to listen on 127.0.0.1 only
  prometheus:
    image: prom/prometheus:latest
    container_name: transcendence-prometheus
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    expose:
      - "9090"
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT:-9090}:9090"
    # Simpler healthcheck
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks: [monitoring]
    # Mejoras de seguridad
    user: "nobody"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  grafana:
    image: grafana/grafana:latest
    container_name: transcendence-grafana
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "127.0.0.1:${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/grafana_admin_user
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    secrets:
      - grafana_admin_user
      - grafana_admin_password
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks: [monitoring]
    depends_on:
      prometheus:
        condition: service_healthy
    # Mejoras de seguridad
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: transcendence-cadvisor
    security_opt:
      - apparmor:unconfined
    ports:
      - "127.0.0.1:${CADVISOR_PORT:-8080}:8080"
    command:
      - '--url_base_prefix=/cadvisor'
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--disable_metrics=disk,diskIO,network,tcp,udp,percpu,sched,process'
    networks: [monitoring]
    # Simplified volumes for dev container environment
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  node-exporter:
    image: prom/node-exporter:latest
    container_name: transcendence-node-exporter
    command:
      - '--web.listen-address=:9100'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - "9100"
    networks: [monitoring]
    # Mejoras de seguridad
    read_only: true
    cap_drop:
      - ALL
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: transcendence-nginx-exporter
    command:
      - -nginx.scrape-uri=http://nginx:8080/nginx_status
    expose:
      - "9113"
    networks: [monitoring]
    depends_on:
      nginx:
        condition: service_started
        required: false
    # Mejoras de seguridad
    read_only: true
    cap_drop:
      - ALL
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  php-fpm-exporter:
    image: ghcr.io/hipages/php-fpm_exporter:latest
    container_name: transcendence-php-fpm-exporter
    command:
      - server
      - --phpfpm.scrape-uri=tcp://backend:9000/status
      - --phpfpm.fix-process-count=true
    expose:
      - "9253"
    networks: [monitoring]
    depends_on:
      backend:
        condition: service_started
        required: false
    # Mejoras de seguridad
    read_only: true
    cap_drop:
      - ALL
    # Reinicio automático
    restart: unless-stopped
    profiles: ["default", "monitoring", "prod"]

  # Development Services (directly exposed ports)
  dev-frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: transcendence-dev-frontend
    ports:
      - "127.0.0.1:${DEV_FRONTEND_PORT:-9280}:${FRONTEND_PORT:-3000}"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    labels:
      - "app=transcendence"
      - "tier=ui"
      - "environment=development"
    networks: [default]
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["dev"]

  dev-backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    container_name: transcendence-dev-backend
    ports:
      - "127.0.0.1:${DEV_BACKEND_PORT:-9380}:${BACKEND_PORT:-9000}"
    volumes:
      - ../backend:/var/www/html
    labels:
      - "app=transcendence"
      - "tier=api"
      - "environment=development"
    environment:
      - APP_ENV=development
      - APP_DEBUG=true
      - DB_DATABASE=/var/www/html/database/database.sqlite
    networks: [default]
    user: root
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - SETGID
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["dev"]

  dev-game-ws:
    build:
      context: ../game-ws
      dockerfile: ../docker/game-ws/Dockerfile
    container_name: transcendence-dev-game-ws
    ports:
      - "127.0.0.1:${DEV_GAME_WS_PORT:-9480}:${GAME_WS_CONTAINER_PORT:-8080}"
    volumes:
      - ../game-ws:/app
    labels:
      - "app=transcendence"
      - "tier=websocket"
      - "environment=development"
    networks: [default]
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["dev"]

  # Testing service
  tester:
    build: 
      context: ../tests
      dockerfile: Dockerfile
    container_name: transcendence-tester
    depends_on:
      nginx:
        condition: service_healthy
      backend:
        condition: service_healthy
      game-ws:
        condition: service_healthy
    networks:
      - default
      - monitoring
    environment:
      BASE_URL: http://nginx
      WS_URL: ws://nginx/ws
      PROM_URL: http://prometheus:9090
      GRAFANA_URL: http://grafana:3000
      GRAFANA_USER: admin
      GRAFANA_PASS: ${GRAFANA_ADMIN_PASSWORD:-admin}
    profiles: ["test"]
    restart: "no"

# Weave Scope - Visualización de la infraestructura
  scope:
    image: weaveworks/scope:1.13.2
    container_name: transcendence-scope
    # 🔑 Permisos y visibilidad
    privileged: true          # acceso a /proc, netns, conntrack
    pid: "host"               # ve los PIDs reales del host
    network_mode: "host"      # ve todas las conexiones de red
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/scope/plugins:/var/run/scope/plugins
    command:
      - "--probe.docker=true"
      - "--weave=false"
    # UI en 4040 del host; si estás en un server remoto, publícalo detrás de Nginx/Access
    ports:
      - "127.0.0.1:${SCOPE_PORT:-9584}:4040"
    restart: unless-stopped
    profiles: ["monitoring","dev"]


# Redes definidas
networks:
  default:
    driver: bridge
  monitoring:
    driver: bridge

# Volúmenes persistentes
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Secretos centralizados
secrets:
  app_key:
    file: ../config/secrets/app_key.secret
  jwt_secret:
    file: ../config/secrets/jwt_secret.secret
  grafana_admin_user:
    file: ../config/secrets/grafana_admin_user.secret
  grafana_admin_password:
    file: ../config/secrets/grafana_admin_password.secret
  scope_htpasswd:
    file: ../config/secrets/scope_htpasswd.secret