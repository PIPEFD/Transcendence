server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Check if request is already HTTPS (from proxy like GitHub Codespaces)
    set $redirect_to_https 1;
    if ($http_x_forwarded_proto = "https") {
        set $redirect_to_https 0;
    }
    if ($http_x_forwarded_ssl = "on") {
        set $redirect_to_https 0;
    }
    
    # If not from HTTPS proxy, redirect to HTTPS
    if ($redirect_to_https = 1) {
        return 301 https://$host$request_uri;
    }
    
    # Otherwise, serve the application on HTTP (proxied)
    include /etc/nginx/snippets/api_proxy.conf;
    include /etc/nginx/snippets/monitoring.conf;
    
    location / {
        proxy_pass http://frontend:3000;
        include /etc/nginx/snippets/proxy_common.conf;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name _;
    
    # Handle HTTP requests to HTTPS port (GitHub Codespaces proxy behavior)
    # Error 497: client sent plain HTTP request to HTTPS port
    error_page 497 =200 $request_uri;

    # SSL Configuration
    ssl_certificate /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;
    ssl_dhparam /etc/ssl/dhparam.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-always" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data:; connect-src 'self' ws: wss:;" always;

    # Root directory and index
    root /var/www/html/public;
    index index.html;
    
    # API endpoint
    include /etc/nginx/snippets/api_proxy.conf;
    
    # WebSocket endpoint (commented out until game-ws service is ready)
    # include /etc/nginx/snippets/ws_proxy.conf;
    
    # Monitoring endpoints (when needed)
    include /etc/nginx/snippets/monitoring.conf;
    
    # Favicon redirect - browser busca /favicon.ico autom√°ticamente
    location = /favicon.ico {
        return 301 /dist/assets/pong_logo.png;
    }
    
    # Ensure correct MIME types for CSS and JS files
    location ~* \.(css)$ {
        proxy_pass http://frontend:3000;
        include /etc/nginx/snippets/proxy_common.conf;
    }
    
    location ~* \.(js)$ {
        proxy_pass http://frontend:3000;
        include /etc/nginx/snippets/proxy_common.conf;
    }
    
    # Handle static files for SPA frontend
    location / {
        # Proxy to frontend service
        proxy_pass http://frontend:3000;
        include /etc/nginx/snippets/proxy_common.conf;
        
        # For SPA, you might want to add:
        # try_files $uri $uri/ /index.html;
    }
    
    # Handle PHP files
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass backend:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
    
    # Simple health check endpoint
    location /healthz {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "OK\n";
    }
}