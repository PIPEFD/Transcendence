# server {
#     listen 80;
#     server_name _;

#     # Root directory for static files
#     root /var/www/html/public;
#     index index.php index.html;

#     # Handle PHP files
#     location ~ \.php$ {
#         try_files $uri /index.php =404;
#         fastcgi_pass backend:9000;
#         fastcgi_index index.php;
#         fastcgi_param SCRIPT_FILENAME /var/www/html/public$fastcgi_script_name;
#         include fastcgi_params;
#     }

#     # Handle static files
#     location / {
#         try_files $uri $uri/ /index.php?$query_string;
#     }
# }

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name _;

    # SSL Configuration
    ssl_certificate /etc/ssl/fullchain.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;
    ssl_dhparam /etc/ssl/dhparam.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-always" always;
    # Política CSP más permisiva para aplicaciones como Grafana y Prometheus
    add_header Content-Security-Policy "default-src * 'unsafe-inline' 'unsafe-eval' data: blob:; frame-ancestors 'self';" always;

    # Root directory and index
    root /var/www/html;
    index index.php index.html;

    # Frontend proxy
    location = /monitoring {
        return 301 $scheme://$host/dashboard.html;
    }
    
    # Archivos HTML de prueba - Tiene que ir ANTES de la ruta / para evitar que sea capturado por el proxy del frontend
    location ~ \.html$ {
        root /var/www/html;
        index index.html;
        try_files $uri =404;
    }

    # Frontend - Captura todo lo que no coincida con otras ubicaciones más específicas
    location / {
        proxy_pass http://frontend:${FRONTEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
    }

    # Frontend static files
    location /dist/ {
        proxy_pass http://frontend:3000/dist/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    location /assets/ {
        proxy_pass http://frontend:3000/assets/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # Health Check endpoint
    location = /api/health {
        fastcgi_pass backend:${BACKEND_PORT};
        fastcgi_param SCRIPT_FILENAME /var/www/html/api/health.php;
        include fastcgi_params;
        fastcgi_read_timeout 2s;
        fastcgi_send_timeout 2s;
        
        # Cache control for health checks
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires 0;
    }

    # Backend API with rate limiting and security
    location /api {
        fastcgi_pass backend:${BACKEND_PORT};
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        
        # Additional security headers for API
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # Auth endpoints with stricter rate limiting
    location ~ ^/api/auth {
        limit_req zone=auth_limit burst=5 nodelay;
        proxy_pass http://backend:${BACKEND_PORT};
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # Additional security headers for Auth
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # PHP files handling
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass backend:${BACKEND_PORT};
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # Regla para reenviar las peticiones a la API al backend (PHP-FPM)
    # Cualquier URL que empiece por /api/ irá al servicio 'backend'.
    location /api/ {
        # Esta línea es importante para que el script PHP reciba la ruta correcta.
        # Elimina el prefijo /api de la URL antes de pasarla.
        rewrite ^/api/(.*)$ /$1 break;
        
        include fastcgi_params;
        # La variable $document_root aquí se refiere a la raíz que se necesita para el script.
        # Asumiendo que tu punto de entrada de la API está en /var/www/html/public/api/
        fastcgi_param SCRIPT_FILENAME /var/www/html/public/api/$fastcgi_script_name;
        fastcgi_pass backend:9000;
    }
    
    # Monitoring endpoints
    location ^~ /prometheus/ {
        auth_basic off;
        proxy_pass http://prometheus:${PROMETHEUS_PORT}/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Configuración adicional para Prometheus
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
    }

    location /grafana/ {
        rewrite ^/grafana/(.*) /$1 break;
        proxy_pass http://grafana:${GRAFANA_CONTAINER_PORT};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Configuración adicional para Grafana
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        
        # Asegurar que no se realice redirección
        proxy_redirect off;
    }

    location ^~ /cadvisor/ {
        auth_basic off;
        proxy_pass http://cadvisor:${CADVISOR_PORT}/cadvisor/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Configuración adicional para CAdvisor
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        
        # Importante: No redirigir para evitar problemas con subpaths
        proxy_redirect off;
    }
    
    # WebSocket para el juego
    location /ws/game/ {
        proxy_pass http://game-ws:${GAME_WS_CONTAINER_PORT}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # Regla para reenviar todo el resto del tráfico al frontend
    # Esta es la regla por defecto si la URL no empieza por /api/.
    location / {
        # 'frontend' es el nombre del servicio en docker-compose.
        proxy_pass http://frontend:3000;

        # Cabeceras necesarias para que el proxy funcione correctamente con WebSockets y peticiones modernas.
		# Se utilizan para reenviar información crucial del cliente original al servidor backend, datos que de otro modo se perderían cuando NGINX actúa como intermediario (proxy)
        
		# Estas dos directivas trabajan juntas y son esenciales para permitir la comunicación a través de protocolos como WebSockets, que se usan en chats y juegos en tiempo real.
		# Un cliente inicia una conexión WebSocket pidiendo "actualizar" (upgrade) la conexión HTTP estándar a una conexión persistente. Estas cabeceras transmiten esa solicitud de actualización a través de NGINX hasta el servidor backend.
		proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

		# Sin esta cabecera -> El backend solo vería el nombre interno del proxy (ej. frontend:3000) en lugar del dominio real que el usuario escribió (ej. mi-aplicacion.com).
		# Esta cabecera conserva el nombre de dominio original solicitado por el usuario.
        proxy_set_header Host $host;

		# Para el servidor backend, todas las peticiones parecen venir de la dirección IP de NGINX.
		# Crea una cabecera X-Real-IP que contiene la dirección IP real del usuario.
        proxy_set_header X-Real-IP $remote_addr;

		# Esta cabecera mantiene una lista de todas las direcciones IP por las que ha pasado una petición
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# Es común que un usuario se conecte a NGINX por HTTPS (seguro), pero que NGINX se comunique con el backend por HTTP (interno, no cifrado). El backend pensaría erróneamente que la conexión es insegura.
		# Esta cabecera le dice al backend qué protocolo (http o https) usó el cliente original. Esto permite al backend, por ejemplo, forzar redirecciones a HTTPS o generar enlaces https:// correctamente.
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}