
server {
  listen 80;
  server_name _;

  # Frontend
  location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass http://frontend:3000;
  }

  # (Si usas PHP-FPM en backend:9000, NO proxy_pass; usa fastcgi_pass en otra ubicación .php)
  # location ~ \.php$ { ... fastcgi_pass backend:9000; }

  # Health temporal
  location /healthz { return 200 "ok\n"; }

  # Incluye aquí tus locations sueltos
  include /etc/nginx/conf.d/locations/*.conf;
}


; server {
;   listen 443 ssl http2;
;   server_name _;

;   ssl_certificate     /etc/nginx/certs/fullchain.pem;
;   ssl_certificate_key /etc/nginx/certs/privkey.pem;

;   # (opcional) WAF si usas ModSecurity
;   # modsecurity on;
;   # modsecurity_rules_file /etc/nginx/modsec/main.conf;

;   # Frontend
;   location / {
;     proxy_pass http://frontend:3000;
;     proxy_set_header Host $host;
;     proxy_set_header X-Real-IP $remote_addr;
;   }

;   # Backend (si es PHP-FPM detrás de FastCGI, mejor servirlo como /api vía php-location
;   # Si tu backend realmente sirve HTTP en 9000, deja proxy_pass; si es php-fpm puro, usa fastcgi_pass en un server aparte)
;   location /api/ {
;     proxy_pass http://backend:9000;
;     proxy_set_header Host $host;
;     proxy_set_header X-Real-IP $remote_addr;
;   }

;   # WS
;   location /ws/ {
;     proxy_pass http://game-ws:8080;
;     proxy_http_version 1.1;
;     proxy_set_header Upgrade $http_upgrade;
;     proxy_set_header Connection "Upgrade";
;   }

;   # Prometheus
;   location /prometheus/ {
;     proxy_pass http://prometheus:9090/;
;     proxy_set_header Host $host;
;   }

;   # Grafana (requiere root_url y serve_from_sub_path)
;   location /grafana/ {
;     proxy_pass http://grafana:3000/;
;     proxy_set_header Host $host;
;   }

;   # Kibana (si lo añades más adelante)
;   # location /kibana/ {
;   #   proxy_pass http://kibana:5601/;
;   #   proxy_set_header Host $host;
;   # }
; }

; # Redirección HTTP → HTTPS
; server {
;   listen 80;
;   server_name _;
;   return 301 https://$host$request_uri;
; }

; # status interno para exporter (no publicar puerto 8080 en host)
; server {
;   listen 8080;
;   location /stub_status {
;     stub_status on;
;     access_log off;
;     allow 127.0.0.1;
;     deny all;
;   }
; }
